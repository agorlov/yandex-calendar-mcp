import httpx
import re
import datetime
from typing import List, Dict, Any, Optional
from bs4 import BeautifulSoup
import caldav
from caldav.elements import dav

class YandexCalendarEvents:
    def __init__(self, caldav_url: str = None,
                 username: str = None, password: str = None):
        self.caldav_url = caldav_url
        self.username = username
        self.password = password
        self.caldav_client = None
        self.caldav_calendar = None
        if caldav_url and username and password:
            self._init_caldav()

    def _init_caldav(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CalDAV –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.caldav_client = caldav.DAVClient(
                url=self.caldav_url,
                username=self.username,
                password=self.password
            )
            
            # –ü–æ–ª—É—á–∞–µ–º principal (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å)
            principal = self.caldav_client.principal()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏
            calendars = principal.calendars()
            
            if not calendars:
                raise Exception("No calendars found")
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            self.caldav_calendar = calendars[0]
            print(f"Successfully connected to calendar: {self.caldav_calendar.name}")
            
        except Exception as e:
            print(f"CalDAV Error: {str(e)}")
            self.caldav_client = None
            self.caldav_calendar = None



    async def create_event(self, title: str, start: datetime.datetime, 
                           end: datetime.datetime, description: str = "") -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ CalDAV
        """
        if not self.caldav_calendar:
            return "CalDAV –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
        ical = f"""BEGIN:VCALENDAR
VERSION:2.0
BEGIN:VEVENT
DTSTART:{start.strftime('%Y%m%dT%H%M%S')}
DTEND:{end.strftime('%Y%m%dT%H%M%S')}
SUMMARY:{title}
DESCRIPTION:{description}
UID:{datetime.datetime.now().timestamp()}@yandex.ru
END:VEVENT
END:VCALENDAR"""

        try:
            self.caldav_calendar.add_event(ical)
            return f"–°–æ–±—ã—Ç–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {str(e)}"

    async def delete_event(self, event_uid: str) -> str:
        """
        –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ UID
        """
        if not self.caldav_calendar:
            return "CalDAV –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ UID
            event = self.caldav_calendar.object_by_uid(event_uid)
            if event:
                event.delete()
                return f"–°–æ–±—ã—Ç–∏–µ {event_uid} —É–¥–∞–ª–µ–Ω–æ"
            return "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"

    async def get_upcoming_events(self, days: int = 90) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        
        Args:
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        if not self.caldav_calendar:
            return "CalDAV –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
            start = datetime.datetime.now()
            end = start + datetime.timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            events = self.caldav_calendar.date_search(
                start=start,
                end=end
            )
            
            if not events:
                return "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å–æ–±—ã—Ç–∏–π
            result = []
            for event in events:
                event_data = event.data
                event_lines = event_data.split('\n')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                summary = None
                start_date = None
                end_date = None
                description = None
                
                for line in event_lines:
                    if line.startswith('SUMMARY:'):
                        summary = line.replace('SUMMARY:', '')
                    elif line.startswith('DTSTART'):
                        date_str = line.split(':')[1]
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ YYYYMMDDTHHMMSS
                        start_date = datetime.datetime.strptime(date_str[:15], '%Y%m%dT%H%M%S')
                    elif line.startswith('DTEND'):
                        date_str = line.split(':')[1]
                        end_date = datetime.datetime.strptime(date_str[:15], '%Y%m%dT%H%M%S')
                    elif line.startswith('DESCRIPTION:'):
                        description = line.replace('DESCRIPTION:', '')
                
                if summary and start_date:
                    event_str = f"üìÖ {summary}\n"
                    event_str += f"   –ù–∞—á–∞–ª–æ: {start_date.strftime('%d.%m.%Y %H:%M')}\n"
                    if end_date:
                        event_str += f"   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    if description:
                        event_str += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    result.append(event_str)
            
            return "\n".join(result) if result else "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {str(e)}"
