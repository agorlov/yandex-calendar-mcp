#!/usr/bin/env python3
# encoding: utf-8

import os
import json
import datetime
from typing import Dict, Any, Optional
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP, Context
from yandex_calendar_events2 import YandexCalendarEvents

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (–µ—Å–ª–∏ –µ—Å—Ç—å)
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CALDAV_URL = os.getenv("YANDEX_CALDAV_URL", "https://caldav.yandex.ru")
USERNAME = os.getenv("YANDEX_USERNAME")
PASSWORD = os.getenv("YANDEX_PASSWORD")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastMCP —Å–µ—Ä–≤–µ—Ä–∞
mcp = FastMCP("yandex-calendar")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ YandexCalendarEvents
calendar_event = YandexCalendarEvents(
    caldav_url=CALDAV_URL,
    username=USERNAME,
    password=PASSWORD
)

@mcp.tool()
async def get_upcoming_events(days: int = 90, format_type: str = "text", ctx: Context = None) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä—è.

    Args:
        days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π. 
                    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 90.
        format_type (str): –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: "text" –∏–ª–∏ "json".
                    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: "text".
        ctx (Context): –ö–æ–Ω—Ç–µ–∫—Å—Ç MCP, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ JSON —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    if ctx:
        ctx.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ {days} –¥–Ω–µ–π")
    
    if not calendar_event.caldav_calendar:
        error_msg = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        if ctx:
            ctx.error(error_msg)
        return error_msg
    
    events_text = await calendar_event.get_upcoming_events(days)
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω JSON —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –≤ JSON
    if format_type.lower() == "json" and events_text != "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π" and not events_text.startswith("–û—à–∏–±–∫–∞"):
        try:
            events_list = []
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è (–∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
            raw_events = events_text.split("üìÖ ")
            
            for raw_event in raw_events:
                if not raw_event.strip():
                    continue
                    
                event_data = {}
                lines = raw_event.strip().split("\n")
                
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                event_data["title"] = lines[0].strip()
                
                for line in lines[1:]:
                    line = line.strip()
                    if line.startswith("–ù–∞—á–∞–ª–æ:"):
                        event_data["start"] = line.replace("–ù–∞—á–∞–ª–æ:", "").strip()
                    elif line.startswith("–û–∫–æ–Ω—á–∞–Ω–∏–µ:"):
                        event_data["end"] = line.replace("–û–∫–æ–Ω—á–∞–Ω–∏–µ:", "").strip()
                    elif line.startswith("–û–ø–∏—Å–∞–Ω–∏–µ:"):
                        event_data["description"] = line.replace("–û–ø–∏—Å–∞–Ω–∏–µ:", "").strip()
                
                events_list.append(event_data)
            
            return json.dumps({"events": events_list}, ensure_ascii=False, indent=2)
        except Exception as e:
            if ctx:
                ctx.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤ JSON: {str(e)}")
            return events_text
    
    return events_text


@mcp.tool()
async def create_calendar_event(
    title: str, 
    start_date: str, 
    start_time: str, 
    duration_minutes: int = 60, 
    description: str = "", 
    ctx: Context = None
) -> str:
    """
    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä–µ.

    Args:
        title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
        start_date (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.2025).
        start_time (str): –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).
        duration_minutes (int): –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60 –º–∏–Ω—É—Ç.
        description (str): –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
        ctx (Context): –ö–æ–Ω—Ç–µ–∫—Å—Ç MCP, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.
    """
    if ctx:
        ctx.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {title} –Ω–∞ {start_date} {start_time}")
    
    if not calendar_event.caldav_calendar:
        error_msg = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å –ö–∞–ª–µ–Ω–¥–∞—Ä—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        if ctx:
            ctx.error(error_msg)
        return error_msg
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime
        try:
            day, month, year = map(int, start_date.split('.'))
            hour, minute = map(int, start_time.split(':'))
            
            start = datetime.datetime(year, month, day, hour, minute)
            end = start + datetime.timedelta(minutes=duration_minutes)
            
        except ValueError as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –¥–∞—Ç—ã –∏ –ß–ß:–ú–ú –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏."
            if ctx:
                ctx.error(error_msg)
            return error_msg
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        result = await calendar_event.create_event(title, start, end, description)
        
        if ctx:
            if "—É—Å–ø–µ—à–Ω–æ" in result:
                ctx.info(result)
            else:
                ctx.error(result)
        
        return result
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}"
        if ctx:
            ctx.error(error_msg)
        return error_msg

if __name__ == "__main__":
    mcp.run(transport='stdio')
